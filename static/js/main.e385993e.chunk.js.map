{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","propName","monsters","map","m","SearchBar","placeholder","handleChange","type","onChange","App","searchHandler","e","setState","searchField","target","value","state","fetch","then","res","json","data","filteredList","this","filter","v","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,MACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLTC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,SAASC,KAAI,SAACC,GAAD,OAC3B,cAAC,EAAD,CAAiBR,QAASQ,GAAfA,EAAEP,UCLRQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEd,UAAU,SACVa,YAAaA,EACbE,KAAK,SACLC,SAAUF,MC0CCG,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAiBFC,cAAgB,SAACC,GACf,OAAO,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjB7C,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IAJH,E,qDAUd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAEX,SAAUoB,S,oBAS9C,WAAU,IAAD,OACDC,EAAeC,KAAKP,MAAMf,SAASuB,QAAO,SAACC,GAAD,OAC9CA,EAAE5B,KAAK6B,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAKvD,OACE,sBAAKlC,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CACEa,YAAY,cACZC,aAAciB,KAAKb,gBAErB,cAAC,EAAD,CAAUV,SAAU,CAAEC,SAAUqB,Y,GAtCtBM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e385993e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"cat\"\n      src={`https://robohash.org/${props.monster.id}?set=set4&size=180x180`}\n    />\n    <h3>{props.monster.name}</h3>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component.jsx\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.propName.monsters.map((m) => (\n        <Card key={m.id} monster={m} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-bar.styles.css\";\n\nexport const SearchBar = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    placeholder={placeholder}\n    type=\"search\"\n    onChange={handleChange}\n  />\n);\n","import { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBar } from \"./components/search-bar/search-bar.component\";\n\nimport \"./App.css\";\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  //set state\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  //life cycle method\n  // invoked immediately after a component is mounted\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => this.setState({ monsters: data }));\n  }\n\n  //\n\n  searchHandler = (e) => {\n    return this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const filteredList = this.state.monsters.filter((v) =>\n      v.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    );\n\n    // console.log(filteredList);\n\n    return (\n      <div className=\"App\">\n        <h1>Cats Rolodex</h1>\n        <SearchBar\n          placeholder=\"search cats\"\n          handleChange={this.searchHandler}\n        />\n        <CardList propName={{ monsters: filteredList }} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}